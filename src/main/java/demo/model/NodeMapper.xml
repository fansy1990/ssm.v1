<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="demo.dao.NodeMapper">
  <resultMap id="BaseResultMap" type="demo.model.Node">
    <id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="folder" jdbcType="INTEGER" property="folder" />
    
    <collection property="children" ofType="demo.model.Node" column="id" select="getChildrenList"/>
  </resultMap>
  <resultMap type="demo.model.Node" id="NormalResultMap">
  	<id column="id" jdbcType="INTEGER" property="id" />
    <result column="name" jdbcType="VARCHAR" property="name" />
    <result column="folder" jdbcType="INTEGER" property="folder" />
    <result column="pid" property="pid"/>
  </resultMap>
  <sql id="Base_Column_List">
    id, name, folder,pid
  </sql>
  <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
    select 
    t.* 
    from table_node t
    where t.id = #{id,jdbcType=INTEGER}
  </select>
  
  <select id="selectPage" resultMap="NormalResultMap">
  
  	select t.* from table_node t where t.id between #{param1} and #{param2}
  </select>
  
  <select id="getChildrenList" resultMap="BaseResultMap">
  	select t.* from table_node t where t.pid= #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
    delete from table_node
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="demo.model.Node">
    insert into table_node (id, name, folder, 
      pid)
    values (#{id,jdbcType=INTEGER}, #{name,jdbcType=VARCHAR}, #{folder,jdbcType=INTEGER}, 
      #{pid,jdbcType=INTEGER})
  </insert>
  <insert id="insertSelective" parameterType="demo.model.Node">
    insert into table_node
    <trim prefix="(" suffix=")" suffixOverrides=",">
      <if test="id != null">
        id,
      </if>
      <if test="name != null">
        name,
      </if>
      <if test="folder != null">
        folder,
      </if>
      <if test="pid != null">
        pid,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides=",">
      <if test="id != null">
        #{id,jdbcType=INTEGER},
      </if>
      <if test="name != null">
        #{name,jdbcType=VARCHAR},
      </if>
      <if test="folder != null">
        #{folder,jdbcType=INTEGER},
      </if>
      <if test="pid != null">
        #{pid,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="demo.model.Node">
    update table_node
    <set>
      <if test="name != null">
        name = #{name,jdbcType=VARCHAR},
      </if>
      <if test="folder != null">
        folder = #{folder,jdbcType=INTEGER},
      </if>
      <if test="pid != null">
        pid = #{pid,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="demo.model.Node">
    update table_node
    set name = #{name,jdbcType=VARCHAR},
      folder = #{folder,jdbcType=INTEGER},
      pid = #{pid,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>
</mapper>